name: CI/CD Pipeline - Asset Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.6'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Security
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run SonarQube Scan
        uses: sonarqube-quality-gate-action@v1.0.1
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 2: Build & Test
  build-and-test:
    runs-on: ubuntu-latest
    needs: quality-check
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: asset_db_test
          MYSQL_USER: asset
          MYSQL_PASSWORD: asset
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run tests with Maven
        run: ./mvnw clean test
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/asset_db_test?createDatabaseIfNotExist=true&serverTimezone=Asia/Ho_Chi_Minh
          SPRING_DATASOURCE_USERNAME: asset
          SPRING_DATASOURCE_PASSWORD: asset
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
      
      - name: Build with Maven
        run: ./mvnw clean package -DskipTests
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: target/*.jar

  # Job 3: Docker Build & Push
  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
      
      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Job 4: Deploy to Staging
  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   if: github.ref == 'refs/heads/develop'
  #   environment: staging
    
  #   steps:
  #     - name: Deploy to staging
  #       run: |
  #         echo "Deploying to staging environment..."
  #         # Add your deployment commands here
  #         # Example: kubectl apply -f k8s/staging/
  #         # Or: docker-compose -f docker-compose.staging.yml up -d

  # # Job 5: Deploy to Production
  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
    
  #   steps:
  #     - name: Deploy to production
  #       run: |
  #         echo "Deploying to production environment..."
  #         # Add your production deployment commands here
